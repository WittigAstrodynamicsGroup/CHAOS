#python code to define attitude ODE.

"""
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Author: Kash Saddul
Institution: Astrodynamics Research Group, 
                University of Southampton
Development period: 2020-2024
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


attitude_ODE.py




This Python code defines the function  representing the ODE for the attitude dynamics of a spacecraft. 
The function is based on the Euler attitude equations and quaternion kinematics. 

It calculates the time derivatives of the state vector, which includes:

- Quaternion (representing spacecraft orientation)  [first 4 elements]
- Angular velocity (rotational velocity of the spacecraft)  [following 3 elements]
- Fuel consumption of the selected pixel (fuel used during thruster activity)     [following element]
- Grid state (**placeholder**, not integrated)  [following element]
- Grid state (**placeholder**, not integrated)  [following element, if a second grid is present]


    State vector:   [ q_x, q_y, q_z, q_r, w_x, w_y, w_z, pixelFuel, grid_1, optional:Grid2]

    NOTE: If no second grid is present, optional:Grid2 is not present


The function considers the following inputs:

- t (float): Current simulation time (seconds).
- omega_state (numpy.ndarray): State vector containing current attitude information.
- torque_thruster (numpy.ndarray): Torque vector generated by thrusters (in body frame).
- torque_perturb (numpy.ndarray): Perturbing torques acting on the spacecraft (e.g., SRP).
- satellite (class object): Instance of the `Satellite` class representing the spacecraft properties.
- grid (class object): Instance of the `Grid` class representing the environment interaction grid.

The function returns the time derivatives of the state vector (rates of change).
"""



import numpy as np


def analytical(t, omega_state, torque_thruster, torque_perturb, satellite,  grid):

    """
    Calculates the time derivatives of the state vector for the spacecraft's attitude dynamics.

    Args:
        t (float): Current simulation time (seconds).
        omega_state (numpy.ndarray): State vector containing current attitude information.
        torque_thruster (numpy.ndarray): Torque vector generated by thrusters (in body frame).
        torque_perturb (numpy.ndarray): Perturbing torques acting on the spacecraft (e.g., magnetic).
        satellite (class object): Instance of the `Satellite` class representing the spacecraft properties.
        grid (class object): Instance of the `Grid` class representing the environment interaction grid.

    Returns:
        numpy.ndarray: Time derivatives of the state vector (rates of change).
    """



    #get omega components and quaternion 
    quaternion = omega_state[:4]
    omega_rot = omega_state[4:7]# omega rot in body-fixed frame.
    #create derivative array
    omega_state_dot = np.zeros_like(omega_state)
    
    
    #update values for satellite class 
    satellite.quaternion = quaternion
    satellite.angularVel = omega_rot

    #Split components of angVel
    wx, wy, wz = omega_rot 
    

    #extract other constants:
    inertia_inv = satellite.InverseinertiaMatrix                    #Satellite inverse inertia matrix
    I = satellite.inertiaMatrix                                     #Satellite inertia matrix

    #sum thruster torques
    #sum torques, SI
    torque = torque_thruster + torque_perturb                       # redundant: +  torque_mag 



    #compute angular acceleration
    matrix = torque - np.cross(omega_rot, np.matmul(I, omega_rot))
    omega_dot = np.matmul(inertia_inv, matrix)




    #compute quatenion rate of change - numerical
    lmbda_matrix = np.array([[0, wz, -wy, wx], [-wz, 0, wx, wy], [wy, -wx, 0, wz], [-wx, -wy, -wz, 0]])
    q_dot = 0.5 * np.matmul(lmbda_matrix, quaternion)
    


    #fuel ODE:
    fuel_consumption = -1 * grid.state                              #do not comsume when grid is off



    #populate the derivative array
    omega_state_dot[:4] = q_dot                                     #quaternion derivative
    omega_state_dot[4:7] = omega_dot                                # angular vel derivative
    omega_state_dot[7] = fuel_consumption                           #fuel consumption derivative
    omega_state_dot[8] = 0                                          #just track the state, do not alter it
    omega_state_dot[-1] = 0                                         #just track the state, do not alter it


    return omega_state_dot





